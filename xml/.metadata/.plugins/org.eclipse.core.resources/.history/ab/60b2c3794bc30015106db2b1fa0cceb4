package com.example.bing0;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

import android.content.Context;
import android.os.Bundle;
import android.support.v4.app.FragmentActivity;
import android.support.v4.view.ViewPager;
import android.support.v4.view.ViewPager.OnPageChangeListener;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ImageView;
import android.widget.ListView;

public class IndexActivity extends FragmentActivity {
	
	private ViewPager viewpager;    
    //幻灯片图片资源
    private int [] imgArray={R.drawable.view1,R.drawable.view2,R.drawable.view3};
    //图片数组
    private ArrayList<View> viewlist;

    private ImageView imageView;
    //点点
    private ViewGroup pointgroup;
    private ImageView[] pointarr;
    
 // 所有的静态变量  
    static final String URL = "http://api.androidhive.info/music/music.xml";//xml目的地址,打开地址看一下  
    // XML 节点  
    static final String KEY_SONG = "song"; // parent node  
    static final String KEY_ID = "id";  
    static final String KEY_TITLE = "title";  
    static final String KEY_ARTIST = "artist";  
    static final String KEY_DURATION = "duration";  
    static final String KEY_THUMB_URL = "thumb_url";  
      
    ListView list;  
        LazyAdapter adapter;  
    
	@SuppressWarnings("deprecation")
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		
		
		
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_index);
		
		//初始化
        viewpager =(ViewPager) findViewById(R.id.viewpager);
        pointgroup =(ViewGroup) findViewById(R.id.pointgroup);
        viewlist = new ArrayList<View>();
        
        //将图片装载到数组    
        for(int i=0;i<imgArray.length;i++){
            imageView =new ImageView(this);
            //设置图片
            imageView.setBackgroundResource(imgArray[i]);
            //设置图片id
            imageView.setId(imgArray[i]);
            viewlist.add(imageView);
            
        }
        
        /*
         * viewpager加载适配器
         * MyPageAdapter为自定义适配器
         * */
        
        //传递上下文
        Context context = IndexActivity.this;
        MyPageAdapter pageadapter2 =new MyPageAdapter(viewlist,context);
        viewpager.setAdapter(pageadapter2);        
        
        
        //点数组
        pointarr=new ImageView[imgArray.length];
        //把点加入布局，和设置点状态
        for(int i=0;i<imgArray.length;i++){
            ImageView point=new ImageView(this);        
            
            //设置点大小
            point.setLayoutParams(new LayoutParams(10,10)); 
            pointarr[i]=point;
            //状态处理
            if(i==0){
                pointarr[i].setBackgroundResource(R.drawable.viewpage_point_focused);
            }else{
                pointarr[i].setBackgroundResource(R.drawable.viewpage_point_unfocused);
            }
            //加入到容器
            pointgroup.addView(pointarr[i]);
        }
        
    
        //viewpager设置监听器
        pointChangeListener pointListener=new pointChangeListener();
        viewpager.setOnPageChangeListener((OnPageChangeListener) pointListener);
        //点击图片
        
        
        ArrayList<HashMap<String, String>> songsList = new ArrayList<HashMap<String, String>>();  
        
        XMLParser parser = new XMLParser();  
        String xml = null;
		try {
			xml = parser.getXmlFromUrl(URL);
		} catch (ClientProtocolException | IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} // 从网络获取xml  
        Document doc = parser.getDomElement(xml); // 获取 DOM 节点  
          
        NodeList nl = doc.getElementsByTagName(KEY_SONG);  
        // 循环遍历所有的歌节点 <song>  
        for (int i = 0; i < nl.getLength(); i++) {  
            // 新建一个 HashMap  
            HashMap<String, String> map = new HashMap<String, String>();  
            Element e = (Element) nl.item(i);  
            //每个子节点添加到HashMap关键= >值  
            map.put(KEY_ID, parser.getValue(e, KEY_ID));  
            map.put(KEY_TITLE, parser.getValue(e, KEY_TITLE));  
            map.put(KEY_ARTIST, parser.getValue(e, KEY_ARTIST));  
            map.put(KEY_DURATION, parser.getValue(e, KEY_DURATION));  
            map.put(KEY_THUMB_URL, parser.getValue(e, KEY_THUMB_URL));  
  
            // HashList添加到数组列表  
            songsList.add(map);  
        }  
          
  
        list=(ListView)findViewById(R.id.list);  
          
          
              adapter=new LazyAdapter(this, songsList);          
              list.setAdapter(adapter);  
          
  
        //为单一列表行添加单击事件  
  
        list.setOnItemClickListener(new OnItemClickListener() {  
  
            @Override  
            public void onItemClick(AdapterView<?> parent, View view,  
                    int position, long id) {  
                              
                        //这里可以自由发挥，比如播放一首歌曲等等  
            }  
        });
        
        
        
    }
        
    
    /*
     * viewpage监听器
     */
    
    public class pointChangeListener implements OnPageChangeListener{

        @Override
        public void onPageScrollStateChanged(int arg0) {
            // TODO Auto-generated method stub
            
        }

        @Override
        public void onPageScrolled(int arg0, float arg1, int arg2) {
            // TODO Auto-generated method stub
            
        }

        @Override
        //比如切换到第二张图片，相应索引的点为选择状态，其他为未选中状态
        public void onPageSelected(int arg0) {
            
            // TODO Auto-generated method stub
            for(int i=0;i<pointarr.length;i++){
                pointarr[arg0].setBackgroundResource(R.drawable.viewpage_point_focused);    
                if(arg0 !=i){
                pointarr[i].setBackgroundResource(R.drawable.viewpage_point_unfocused);    
                }
            }
            
        }
        
        
    }
    
}